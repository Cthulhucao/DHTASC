# -*- coding: utf-8 -*-

"""
处理roma/taxi数据集的数据
选取2-5日的三百辆出租车的行驶轨迹
"""
import random
import json
import sys

import config
import numpy as np
import time
# 从原始数据集中抽取02-05每个小时的数据
# 将其存储在roma下，每个小时为一个文件
# 文件中每条数据格式为：id; 时间; 纬度 经度

# # -----------------------------------------------------------------------
carid = set()
with open('roma\\taxi_february.txt','r',encoding='utf-8') as f:
    lines = f.readlines( )
# num = 1
for line in lines:
    id,times,loc = line.split(';')
    # times 格式： 2014-02-01 00:00:02.048546+01
    times = times.split('.')[0]
    t_times = times.split(' ')
    # loc 格式： POINT(41.8523047579646 12.5774065771898)
    loc = loc[6:-2]
    if t_times[0] == '2014-02-05':
        write_file_name = 'roma\\02-05-'+ t_times[1].split(':')[0]+'.txt'
        write_file_content = id+';'+times+';'+loc+'\n'
        print(write_file_content)
        with open(write_file_name,'a',encoding='utf-8') as wf:
            wf.writelines(write_file_content)


print(list(carid))
#
# # -----------------------------------------------------------------------

xuhao = ['00','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
#
idddx = {}
# for xh in xuhao:
#     read_file_name = 'roma\\02-5-' + xh++'.txt'
#     with open(read_file_name,'r',encoding='utf-8') as rf:
#         lines = rf.readlines()
for xh in xuhao:
    read_file_name = 'roma\\02-05-' + xh + '.txt'
    with open(read_file_name, 'r', encoding='utf-8') as rf:
        lines = rf.readlines()
    carid = set()
    for line in lines:
        id,times,loc = line.split(';')
        carid.add(id)
        if len(carid)==50:
            idd = random.sample(list(carid),30)
            idddx[xh]=idd
            break
    if len(carid)<50:
        print(f"{xh}的carid 数量是{len(carid)}")

print(idddx)


# # ======================================感知任务=========================================================
# # # 生成任务描述
# def gen_task_des():
#     sensorID = list(range(1, config.sensor_num + 1))
#     # 设置该任务需要的传感器数量
#     sensorNum = int(random.gauss(config.mu_sensor_num_of_task, config.sigma_sensor_num_of_task))
#     # 从传感器列表中随机选择sensorNum个类型的传感器
#     x = 0
#     # 每个任务以0.2的概率拥有不通用的传感器11、12
#     spec_sensor = [11, 12]
#     temp2 = []
#     if sensorNum >= 2:
#         suiji1 = np.random.uniform(0, 1, 2)
#         for no in range(2):
#             if suiji1[no] <= 0.2:
#                 temp2.append(spec_sensor[no])
#                 x = x + 1
#     temp2 = temp2 + random.sample(sensorID[0:config.sensor_num - x], sensorNum - x)
#
#     # 完成任务所需的参与者人数，low and high
#     low = random.randint(config.left_need_people_low, config.right_need_people_low)
#     high = random.randint(config.left_need_people_high, config.right_need_people_high)
#     temp4 = [low, high]
#
#     # 任务的预算与完成任务所需的传感器数量成正比,但是设置了任务最低预算
#     price_per = random.randint(config.left_per_budget_range, config.right_per_budget_range)  # 不同的任务发布者对任务的预算估计不同
#
#     # 该任务的预算为
#     temp3 = price_per * sensorNum * low
#
#     return [temp2, temp3,temp4]
#
#
#
# # carid = ['313', '236', '172', '17', '217', '359', '308', '51', '40', '323', '267', '244', '290', '204', '340', '243', '348', '24', '12', '170', '369', '293', '129', '179', '229', '3', '278', '298', '305', '309', '291', '250', '107', '176', '257', '70', '93', '301', '310', '366', '346', '266', '203', '288', '183', '254', '137', '167', '205', '239', '4', '131', '151', '57', '262', '92', '209', '122', '335', '283', '295', '275', '73', '241', '195', '39', '43', '7', '248', '365', '138', '261', '358', '101', '357', '269', '268', '315', '147', '220', '187', '50', '336', '121', '8', '180', '62', '119', '125', '185', '200', '13', '238', '55', '95', '332', '97', '230', '23', '355', '287', '328', '258', '19', '264', '322', '28', '210', '202', '316', '289', '260', '223', '99', '368', '300', '171', '206', '49', '214', '213', '118', '130', '65', '143', '104', '320', '126', '314', '270', '53', '279', '150', '156', '344', '103', '144', '113', '222', '31', '140', '294', '76', '90', '47', '259', '342', '175', '249', '74', '54', '182', '155', '228', '329', '360', '297', '60', '79', '80', '159', '11', '120', '232', '102', '256', '2', '191', '215', '117', '154', '96', '59', '255', '280', '198', '29', '30', '234', '87', '124', '94', '112', '245', '339', '347', '21', '84', '85', '225', '81', '72', '169', '78', '224', '160', '350', '37', '226', '83', '91', '174', '211', '110', '362', '199', '135', '82', '274', '285', '337', '311', '127', '181', '324', '184', '41', '345', '231', '32', '302', '351', '61', '153', '326', '330', '100', '361', '237', '141', '246', '42', '89', '317', '14', '162', '149', '115', '331', '235', '45', '190', '321', '186', '325', '196', '163', '193', '66', '192', '106', '157', '276', '212', '88', '128', '334', '221', '284', '48', '352', '188', '132', '353', '148', '56', '338', '158', '44', '123', '46', '282', '349', '71', '367', '252', '273', '139', '58', '75', '341', '67', '306', '152', '178', '105', '134', '356', '363', '194', '240', '145', '343', '197', '318', '68', '242', '22', '109', '281']
#
# # xuhao = ['00','01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
# xuhao = ['00','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
#
# # # 随机选择30个车 ， 取10次数据采集做为任务的位置和时间
# carid = {
#     '00':['238', '156', '132', '119', '37', '81', '132', '198', '242', '113', '40', '21', '365', '257', '22', '129', '235', '202', '106', '85', '203', '328', '209', '238', '266', '200', '94', '139', '225', '222'],
#     '05': ['70', '260', '193', '229', '129', '290', '257', '11', '291', '294', '187', '242', '8', '236', '67', '137', '109', '47', '24', '225', '45', '190', '353', '310', '250', '351', '124', '238', '212', '195'],
#     '06': ['67', '212', '310', '155', '351', '58', '178', '254', '229', '104', '162', '238', '11', '68', '129', '103', '318', '127', '24', '250', '290', '71', '109', '140', '124', '172', '50', '225', '236', '70'],
#     '07': ['311', '290', '31', '151', '127', '51', '7', '47', '273', '332', '55', '269', '254', '318', '53', '321', '264', '315', '140', '67', '274', '153', '61', '138', '24', '341', '268', '317', '130', '291'],
#     '08': ['318', '167', '7', '109', '58', '149', '96', '50', '8', '153', '250', '46', '100', '130', '326', '259', '315', '11', '47', '187', '334', '157', '97', '317', '338', '268', '137', '51', '239', '128'],
#     '09': ['124', '100', '309', '273', '368', '326', '185', '363', '254', '334', '274', '96', '163', '239', '71', '24', '357', '11', '7', '311', '121', '232', '318', '14', '109', '367', '291', '197', '70', '358'],
#     '10': ['159', '95', '334', '58', '197', '249', '291', '45', '309', '288', '73', '97', '256', '96', '248', '326', '275', '167', '151', '318', '357', '290', '56', '349', '187', '71', '311', '335', '270', '175'],
#     '11': ['322', '8', '19', '167', '84', '67', '91', '348', '298', '66', '275', '321', '137', '140', '43', '95', '12', '11', '50', '127', '232', '97', '311', '122', '160', '124', '53', '80', '172', '104'],
#     '12': ['14', '357', '187', '338', '269', '175', '8', '47', '353', '318', '336', '231', '67', '317', '148', '256', '19', '7', '172', '24', '93', '275', '50', '80', '12', '130', '178', '58', '250', '91'],
#     '13': ['231', '100', '127', '255', '282', '178', '361', '269', '91', '31', '112', '252', '56', '317', '84', '264', '8', '315', '248', '93', '70', '175', '102', '11', '336', '351', '46', '232', '298', '97'],
#     '14': ['260', '59', '288', '148', '82', '152', '345', '255', '91', '66', '359', '53', '134', '131', '339', '350', '118', '221', '363', '291', '183', '315', '267', '239', '182', '316', '366', '92', '311', '79'],
#     '15': ['13', '273', '192', '120', '300', '186', '194', '145', '78', '32', '157', '230', '131', '66', '360', '255', '339', '17', '183', '205', '152', '316', '148', '41', '28', '221', '92', '49', '342', '267'],
#     '16': ['258', '224', '337', '118', '158', '144', '325', '223', '255', '267', '343', '280', '245', '131', '347', '90', '301', '204', '324', '356', '78', '32', '74', '198', '134', '205', '154', '30', '183', '331'],
#     '17': ['78', '110', '4', '32', '202', '324', '145', '44', '41', '325', '194', '301', '49', '191', '279', '176', '76', '352', '141', '300', '347', '126', '81', '23', '62', '198', '21', '278', '87', '276'],
#     '18': ['139', '13', '118', '366', '76', '126', '240', '302', '316', '285', '355', '120', '88', '284', '87', '78', '85', '3', '329', '37', '198', '202', '94', '180', '158', '49', '206', '350', '21', '183'],
#     '19': ['343', '365', '198', '117', '62', '132', '94', '29', '202', '308', '183', '107', '329', '120', '262', '90', '285', '284', '144', '85', '152', '169', '4', '125', '276', '143', '131', '139', '147', '199'],
#     '20': ['243', '13', '132', '198', '81', '325', '37', '284', '180', '144', '107', '156', '76', '90', '106', '135', '314', '360', '230', '170', '131', '308', '279', '220', '139', '359', '57', '17', '217', '301'],
#     '21': ['147', '262', '132', '88', '106', '359', '29', '314', '139', '76', '81', '365', '224', '208', '144', '110', '39', '360', '193', '205', '169', '184', '4', '223', '2', '217', '192', '225', '220', '343'],
#     '22': ['313', '257', '44', '314', '223', '4', '343', '54', '245', '228', '191', '328', '132', '81', '302', '183', '22', '225', '242', '208', '3', '76', '240', '222', '325', '42', '365', '241', '184', '143'],
#     '23': ['324', '220', '308', '115', '40', '352', '156', '208', '176', '224', '81', '132', '135', '235', '2', '365', '113', '143', '198', '223', '222', '3', '129', '246', '196', '54', '21', '343', '257', '191']
#     }
#
# # 对于每个carid, 每4分钟获取一次位置
#
# for xh in xuhao:
#     read_file_name = 'roma\\02-05-'+ xh + '.txt'
#     write_file_name = 'roma\\02-05-'+ xh + '.json'
#     res = {}
#     res_num= 0
#     with open(read_file_name,'r', encoding='utf-8') as rf:
#         lines = rf.readlines()
#     start_times = 0
#     jiange = 4
#     flag = [False for i in range(30)]
#     for line in lines:
#         id, times, loc = line.split(';')
#         j_times = int(times.split(' ')[1][3:5])
#         # 如果该条数据在当前时间区间内
#         if start_times<=j_times< start_times+jiange:
#             if id in carid[xh]:
#                 carid_index= carid[xh].index(id)
#             else:
#                 continue
#             # 并且该carid还未选择数据，则将该条数据加入文件中
#             if flag[carid_index] is False:
#                 loc1 = loc.strip().split(' ')
#                 timeArray = time.strptime(times, "%Y-%m-%d %H:%M:%S")
#                 time_stamp = int(time.mktime(timeArray))
#                 temp1 = [loc1[0],loc1[1],time_stamp]
#                 res_temp = [temp1] + gen_task_des()
#                 res[str(res_num)] = res_temp
#                 res_num = res_num + 1
#                 flag[carid_index] = True
#             else:
#                 start_times = start_times + jiange
#                 continue
#         else:
#             flag = [False for i in range(30)]
#
#     with open(write_file_name,'w',encoding='utf-8') as wf:
#         json.dump(res,wf)

# ==================================================================================================


# ---------------------------------参与者生成--------------------------------------------------------
def gen_participant_des():
    while True:
        willing_sensor_num = int(random.gauss((config.sensor_num) // 2, 1))
        if willing_sensor_num <= config.sensor_num - 2:
            # print(willing_sensor_num)
            break
    willing_sensor = random.sample(list(range(1, config.sensor_num - 1)), willing_sensor_num)
    no_willing_sensor = []
    for no in range(1, config.sensor_num - 1):
        if no not in willing_sensor:
            no_willing_sensor.append(no)
    no_exist_sensor = []
    # 参与者以0.5的概率拥有11号和12号传感器
    suiji1 = np.random.uniform(0, 1, 2)
    for no in range(2):
        if suiji1[no] > 0.5:
            suiji2 = np.random.uniform(0, 1, 1)
            if suiji2 >= 0.5:
                willing_sensor.append(config.sensor_num - 1 + no)
            else:
                no_willing_sensor.append(config.sensor_num - 1 + no)
        else:
            no_exist_sensor.append(config.sensor_num - 1 + no)
    # 为每个传感器生成期望报酬和负载，其中愿意共享的传感器期望报酬为0
    temp21 = []
    for w in willing_sensor:
        workload = random.randint(config.left_workload, config.right_workload)
        temp21.append([w, 0, workload])
    temp22 = []
    for nw in no_willing_sensor:
        pay = random.randint(config.left_pay, config.right_pay)
        workload = random.randint(config.left_workload, config.right_workload)
        temp22.append([nw, pay, workload])
    temp23 = []
    for ne in no_exist_sensor:
        pay = sys.maxsize
        workload = 0
        temp23.append([ne, pay, workload])
    temp2 = [temp21 + temp22 + temp23]
    return temp2

# 随机选择30辆车
xuhao = ['00','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']

carid2 = {
    '00': ['89', '119', '21', '191', '235', '94', '202', '223', '85', '238', '129', '139', '198', '113', '241', '87', '22', '242', '328', '257', '143', '40', '294', '220', '236', '222', '62', '196', '266', '203'],
    '05': ['200', '353', '124', '24', '222', '104', '58', '140', '172', '51', '127', '45', '250', '8', '268', '103', '153', '11', '72', '187', '290', '212', '351', '178', '162', '193', '67', '101', '260', '109'],
    '06': ['234', '254', '104', '290', '68', '250', '102', '241', '229', '190', '70', '187', '72', '212', '67', '353', '50', '45', '172', '109', '124', '11', '358', '8', '101', '236', '137', '287', '140', '238'],
    '07': ['254', '109', '7', '140', '127', '51', '273', '315', '341', '197', '155', '67', '151', '47', '264', '11', '178', '332', '291', '311', '149', '153', '317', '55', '46', '73', '274', '31', '353', '97'],
    '08': ['53', '84', '50', '157', '323', '7', '249', '318', '282', '149', '250', '8', '109', '14', '11', '58', '12', '187', '96', '140', '315', '100', '153', '338', '130', '128', '317', '231', '197', '137'],
    '09': ['250', '322', '361', '84', '11', '149', '318', '96', '232', '339', '163', '14', '24', '7', '8', '167', '357', '254', '291', '358', '58', '172', '160', '274', '264', '124', '153', '72', '71', '282'],
    '10': ['80', '97', '84', '334', '249', '55', '163', '58', '357', '82', '187', '197', '31', '95', '100', '175', '367', '96', '149', '155', '45', '290', '311', '326', '309', '151', '140', '349', '275', '56'],
    '11': ['187', '91', '175', '137', '287', '256', '101', '335', '140', '127', '190', '8', '104', '232', '348', '43', '167', '172', '160', '311', '95', '229', '67', '11', '55', '275', '150', '317', '268', '321'],
    '12': ['338', '100', '311', '275', '256', '269', '67', '12', '7', '229', '84', '50', '19', '56', '353', '317', '197', '175', '71', '336', '73', '148', '14', '58', '178', '93', '24', '47', '234', '368'],
    '13': ['252', '97', '329', '59', '46', '248', '102', '31', '151', '103', '323', '358', '72', '95', '338', '298', '231', '112', '188', '256', '342', '264', '287', '11', '91', '60', '78', '175', '70', '127'],
    '14': ['147', '359', '366', '154', '334', '291', '57', '351', '93', '288', '308', '345', '315', '92', '91', '126', '167', '148', '134', '79', '182', '311', '342', '152', '221', '183', '59', '163', '66', '65'],
    '15': ['339', '123', '148', '131', '210', '221', '342', '360', '329', '110', '255', '350', '4', '331', '17', '145', '78', '28', '289', '323', '273', '205', '157', '79', '152', '120', '74', '141', '183', '92'],
    '16': ['37', '258', '3', '331', '89', '48', '147', '81', '158', '266', '302', '74', '76', '343', '301', '223', '135', '347', '337', '145', '300', '324', '255', '280', '243', '144', '13', '192', '183', '28'],
    '17': ['81', '324', '279', '316', '194', '202', '213', '301', '276', '191', '141', '126', '32', '90', '22', '284', '76', '89', '352', '278', '134', '21', '49', '28', '220', '300', '198', '110', '331', '41'],
    '18': ['284', '209', '360', '110', '325', '152', '285', '240', '107', '198', '37', '206', '41', '316', '106', '87', '85', '13', '139', '324', '3', '4', '88', '180', '62', '194', '49', '158', '131', '202'],
    '19': ['202', '355', '145', '170', '29', '76', '13', '94', '117', '139', '276', '120', '143', '302', '213', '243', '184', '125', '169', '41', '131', '314', '85', '106', '365', '134', '132', '147', '252', '308'],
    '20': ['308', '131', '284', '180', '126', '94', '356', '245', '170', '192', '37', '135', '17', '152', '57', '217', '147', '3', '204', '366', '139', '279', '81', '325', '106', '107', '90', '359', '29', '230'],
    '21': ['94', '49', '4', '88', '205', '343', '135', '224', '107', '147', '110', '245', '223', '44', '132', '213', '220', '301', '169', '308', '2', '29', '208', '81', '139', '144', '225', '126', '243', '360'],
    '22': ['169', '54', '222', '240', '3', '81', '198', '76', '132', '4', '2', '144', '224', '208', '143', '302', '186', '314', '352', '89', '325', '85', '184', '245', '308', '328', '343', '200', '228', '94'],
    '23': ['135', '2', '40', '106', '257', '81', '228', '198', '352', '241', '85', '193', '143', '94', '54', '89', '132', '266', '224', '365', '324', '328', '308', '196', '42', '129', '222', '113', '169', '202']
}

# # 对于每个carid, 每4分钟获取一次位置

for xh in xuhao:
    read_file_name = 'roma\\02-05-'+ xh + '.txt'
    write_file_name = 'roma\\02-05-'+ xh + '_p.json'
    res = {}
    res_num= 0
    times = '2014-02-05 '+ xh+':00:00'
    timeArray = time.strptime(times, "%Y-%m-%d %H:%M:%S")
    time_stamp = int(time.mktime(timeArray))
    with open(read_file_name,'r', encoding='utf-8') as rf:
        lines = rf.readlines()
    start_times = 0
    jiange = 4
    flag = [False for i in range(30)]
    for line in lines:
        id, times, loc = line.split(';')
        j_times = int(times.split(' ')[1][3:5])
        # 如果该条数据在当前时间区间内
        if start_times<=j_times< start_times+jiange:
            if id in carid2[xh]:
                carid_index= carid2[xh].index(id)
            else:
                continue
            # 并且该carid还未选择数据，则将该条数据加入文件中
            if flag[carid_index] is False:
                loc1 = loc.strip().split(' ')
                temp1 = [loc1[0],loc1[1],time_stamp]
                res_temp = [temp1] + gen_participant_des()
                res[str(res_num)] = res_temp
                res_num = res_num + 1
                flag[carid_index] = True
            else:
                start_times = start_times + jiange
                continue
        else:
            flag = [False for i in range(30)]

    with open(write_file_name,'w',encoding='utf-8') as wf:
        json.dump(res,wf)

